#memotization :
tend to store the valur of some problems (overlapping subproblems)
1. draw recursion sol;
2. a) dp[n+1] ///take max(declare)
3. b) dp[n] store in (f(n-1)+f(n-2))
4. c) if(dp[n]!=1) return dp[n];

1. dp[n+1]
memset(dp,-1, sizeof(dp));
if(n<=1) return n;
if(dp[n]!=-1) return dp[n];
return dp[n]=f(n-1, dp)+f(n-2, dp);

///space complexity : O(N)+O(N)

//time:O(N)

//////////////////////Tabulation...................................
#tabulation(bottom up)
1.dp[n+1]
2.dp[0]=0, dp[1]=1
3. for i=2 to n: dp[i] =dp[i-1]+dp[i-2]

//time : O(N)
//space: O(N)

or

prev2=0, prev=1;

for i=2 to n:
curr[i] = prev+prev2
prev2=prev;
prev=curr




